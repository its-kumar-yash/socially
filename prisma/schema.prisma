// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String   @unique
  clerkId   String   @unique
  name      String?
  bio       String?
  image     String?
  location  String?
  website   String?
  createdAt DateTime @default(now()) // member since 2020
  updatedAt DateTime @updatedAt

  //Relations 
  posts    Post[] // one to many relation 
  comments Comment[] // one to many relation
  likes    Like[] // one to many relation

  followers Follows[] @relation("following") // users following the user
  following Follows[] @relation("follower") // users the user is following

  notifications        Notification[] @relation("userNotifications") // notifications received by the user
  notificationsCreated Notification[] @relation("notificationsCreator") // notifications triggered by the user
}

model Post {
  id        String   @id @default(cuid())
  authorId  String
  content   String?
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  //Relations
  author        User           @relation(fields: [authorId], references: [id], onDelete: Cascade) // cascade delete means if the user is deleted, all the posts by the user will be deleted
  comments      Comment[]
  likes         Like[]
  notifications Notification[]
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  authorId  String
  postId    String
  createdAt DateTime @default(now())

  //Relations
  author        User           @relation(fields: [authorId], references: [id], onDelete: Cascade)
  post          Post           @relation(fields: [postId], references: [id], onDelete: Cascade)
  notifications Notification[]

  @@index([authorId, postId]) // composite index to make the query faster when fetching comments by a user or post 
}

model Like {
  id        String   @id @default(cuid())
  postId    String
  userId    String
  createdAt DateTime @default(now())

  //Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId]) // unique index to make sure a user can only like a post once  
  @@index([userId, postId]) // composite index to make the query faster when fetching likes by a user or post 
}

model Follows {
  followerId  String
  followingId String
  createdAt   DateTime @default(now())

  //Relations
  follower  User @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation("following", fields: [followingId], references: [id], onDelete: Cascade)

  @@id([followerId, followingId]) // composite primary key to make sure a user can only follow another user once  
  @@index([followerId, followingId]) // composite index to make the query faster when fetching followers or following by a user
}

model Notification {
  id        String           @id @default(cuid())
  userId    String
  creatorId String
  type      NotificationType
  read      Boolean          @default(false)
  postId    String?
  commentId String?
  createdAt DateTime         @default(now())

  //Relations
  user    User     @relation("userNotifications", fields: [userId], references: [id], onDelete: Cascade)
  creator User     @relation("notificationsCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  post    Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  comment Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt]) // composite index to make the query faster when fetching notifications by a user or read status
}

enum NotificationType {
  LIKE
  COMMENT
  FOLLOW
}
